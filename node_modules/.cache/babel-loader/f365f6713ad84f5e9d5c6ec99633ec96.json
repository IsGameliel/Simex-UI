{"ast":null,"code":"var _jsxFileName = \"/home/uneey/Desktop/projects/Incomplete project/Simex/simex-front/src/components/home/Countdown.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Container } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Countdown() {\n  _s();\n\n  const Ref = useRef(null); // The state for our timer\n\n  const [timer, setTimer] = useState('00:00:00');\n\n  const getTimeRemaining = e => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor(total / 1000 % 60);\n    const minutes = Math.floor(total / 1000 / 60 % 60);\n    const hours = Math.floor(total / 1000 / 60 / 60 % 24);\n    return {\n      total,\n      hours,\n      minutes,\n      seconds\n    };\n  };\n\n  const startTimer = e => {\n    let {\n      total,\n      hours,\n      minutes,\n      seconds\n    } = getTimeRemaining(e);\n\n    if (total >= 0) {\n      // update the timer\n      // check if less than 10 then we need to \n      // add '0' at the begining of the variable\n      setTimer((hours > 9 ? hours : '0' + hours) + ':' + (minutes > 9 ? minutes : '0' + minutes) + ':' + (seconds > 9 ? seconds : '0' + seconds));\n    }\n  };\n\n  const clearTimer = e => {\n    // If you adjust it you should also need to\n    // adjust the Endtime formula we are about\n    // to code next    \n    setTimer('0:02:00'); // If you try to remove this line the \n    // updating of timer Variable will be\n    // after 1000ms or 1sec\n\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000);\n    Ref.current = id;\n  };\n\n  const getDeadTime = () => {\n    let deadline = new Date(); // This is where you need to adjust if \n    // you entend to add more time\n    // deadline.setSeconds(deadline.getSeconds() + 10);\n\n    deadline.setMinutes(deadline.getMinutes() + 2);\n    return deadline;\n  }; // We can use useEffect so that when the component\n  // mount the timer will start as soon as possible\n  // We put empty array to act as componentDid\n  // mount only\n\n\n  useEffect(() => {\n    clearTimer(getDeadTime());\n  }, []); // Another way to call the clearTimer() to start\n  // the countdown is via action event from the\n  // button first we create function to be called\n  // by the button\n\n  const onClickReset = () => {\n    clearTimer(getDeadTime());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"countdown_content\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pink_header_count\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Not long left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"static/img/zigzag.png\",\n        className: \"zigzag\",\n        alt: \"line circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"static/img/linec.png\",\n        className: \"linec\",\n        alt: \"line circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"static/img/times.png\",\n        className: \"time\",\n        alt: \"line circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"service_caption\",\n        children: \"Service will be updated in:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"count_para\",\n        children: [\"The first and second parameters of the drop-shadow() function specifies the horizontal and vertical offset of the shadow respectively, \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 65\n        }, this), \"whereas the third parameter operty, with one exception, the 'inset' keyword is not allowed.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"static/img/square.png\",\n        className: \"square\",\n        alt: \"line circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"static/img/semicircle.png\",\n        className: \"semi\",\n        alt: \"line circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"countdown\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"hour\",\n          children: timer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Countdown, \"HPeaHJ9UVwlp0EkypzcTPI/d1Lw=\");\n\n_c = Countdown;\nexport default Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/home/uneey/Desktop/projects/Incomplete project/Simex/simex-front/src/components/home/Countdown.js"],"names":["React","useState","useRef","useEffect","Container","Countdown","Ref","timer","setTimer","getTimeRemaining","e","total","Date","parse","seconds","Math","floor","minutes","hours","startTimer","clearTimer","current","clearInterval","id","setInterval","getDeadTime","deadline","setMinutes","getMinutes","onClickReset"],"mappings":"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","sourcesContent":["// import React from \"react\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport {Container} from \"react-bootstrap\";\n\n\nfunction Countdown(){\n    const Ref = useRef(null);\n     // The state for our timer\n     const [timer, setTimer] = useState('00:00:00');\n  \n  \n     const getTimeRemaining = (e) => {\n         const total = Date.parse(e) - Date.parse(new Date());\n         const seconds = Math.floor((total / 1000) % 60);\n         const minutes = Math.floor((total / 1000 / 60) % 60);\n         const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n         return {\n             total, hours, minutes, seconds\n         };\n     }\n\n     const startTimer = (e) => {\n        let { total, hours, minutes, seconds } \n                    = getTimeRemaining(e);\n        if (total >= 0) {\n  \n            // update the timer\n            // check if less than 10 then we need to \n            // add '0' at the begining of the variable\n            setTimer(\n                (hours > 9 ? hours : '0' + hours) + ':' +\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\n                + (seconds > 9 ? seconds : '0' + seconds)\n            )\n        }\n    }\n\n    const clearTimer = (e) => {\n  \n        // If you adjust it you should also need to\n        // adjust the Endtime formula we are about\n        // to code next    \n        setTimer('0:02:00');\n  \n        // If you try to remove this line the \n        // updating of timer Variable will be\n        // after 1000ms or 1sec\n        if (Ref.current) clearInterval(Ref.current);\n        const id = setInterval(() => {\n            startTimer(e);\n        }, 1000)\n        Ref.current = id;\n    }\n  \n    const getDeadTime = () => {\n        let deadline = new Date();\n  \n        // This is where you need to adjust if \n        // you entend to add more time\n        // deadline.setSeconds(deadline.getSeconds() + 10);\n        deadline.setMinutes(deadline.getMinutes() + 2);\n\n        return deadline;\n    }\n  \n    // We can use useEffect so that when the component\n    // mount the timer will start as soon as possible\n  \n    // We put empty array to act as componentDid\n    // mount only\n    useEffect(() => {\n        clearTimer(getDeadTime());\n    }, []);\n  \n    // Another way to call the clearTimer() to start\n    // the countdown is via action event from the\n    // button first we create function to be called\n    // by the button\n    const onClickReset = () => {\n        clearTimer(getDeadTime());\n    }\n    return(\n        <div className=\"countdown_content\">\n            <Container>\n                <div className=\"pink_header_count\">\n                    <p>Not long left</p>\n                </div>\n                <img src=\"static/img/zigzag.png\" className=\"zigzag\" alt=\"line circle\" />\n                <img src=\"static/img/linec.png\" className=\"linec\" alt=\"line circle\" />\n                <img src=\"static/img/times.png\" className=\"time\" alt=\"line circle\" />\n                <h2 className=\"service_caption\">Service will be updated in:</h2>\n                <p className=\"count_para\">The first and second parameters of the drop-shadow() function specifies the horizontal and \n                    vertical offset of the shadow respectively, <br/>whereas the third parameter operty, with one \n                    exception, the 'inset' keyword is not allowed.</p>\n                <img src=\"static/img/square.png\" className=\"square\" alt=\"line circle\" />\n                <img src=\"static/img/semicircle.png\" className=\"semi\" alt=\"line circle\" />\n                <div className=\"countdown\">\n                    <p className=\"hour\">{timer}</p>\n                </div>\n            </Container>\n        </div>\n    );\n}\n\nexport default Countdown"]},"metadata":{},"sourceType":"module"}